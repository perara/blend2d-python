name: Build Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # Run on version tags for PyPI releases
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      architectures:
        description: 'Architectures to build'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - x86_64-only
        - arm64-only
      publish_to:
        description: 'Publish wheels to'
        required: true
        default: 'none'
        type: choice
        options:
        - none
        - test-pypi
        - pypi

jobs:
  # Build x86_64 wheels
  build_x86_64:
    name: Build x86_64 wheels on Linux
    # Run for non-dispatch events or when 'all' or 'x86_64-only' is selected
    if: >-
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.architectures == 'all' ||
      github.event.inputs.architectures == 'x86_64-only'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      # Set architecture-specific env variables
      - name: Set architecture environment variable
        run: |
          echo "CIBW_ARCHS=x86_64" >> $GITHUB_ENV
          
      # Skip musllinux for all builds and set other cibuildwheel options
      - name: Set cibuildwheel options
        run: |
          echo "CIBW_SKIP=*-musllinux*" >> $GITHUB_ENV
          echo "CIBW_BUILD=cp312-*" >> $GITHUB_ENV
          echo "CIBW_TEST_COMMAND=python -c \"import blend2d; print(blend2d.__version__)\"" >> $GITHUB_ENV

      # Build the wheels
      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
      
      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: ./wheelhouse/*.whl

  # Build ARM64 wheels (separate job)
  build_arm64:
    name: Build ARM64 wheels on Linux
    # Run for non-dispatch events or when 'all' or 'arm64-only' is selected
    if: >-
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.architectures == 'all' ||
      github.event.inputs.architectures == 'arm64-only'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Set up QEMU for ARM64 Linux builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      # Set architecture-specific env variables
      - name: Set architecture environment variable
        run: |
          echo "CIBW_ARCHS=aarch64" >> $GITHUB_ENV
          
      # Skip musllinux for all builds and set other cibuildwheel options
      - name: Set cibuildwheel options
        run: |
          echo "CIBW_SKIP=*-musllinux*" >> $GITHUB_ENV
          echo "CIBW_BUILD=cp312-*" >> $GITHUB_ENV
          echo "CIBW_TEST_COMMAND=python -c \"import blend2d; print(blend2d.__version__)\"" >> $GITHUB_ENV

      # Build the wheels
      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
      
      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu-latest-aarch64
          path: ./wheelhouse/*.whl

  # Job to combine all wheels and publish to PyPI
  publish:
    name: Publish Wheels to PyPI
    needs: [build_x86_64, build_arm64]
    runs-on: ubuntu-latest
    # Run based on conditions
    if: >-
      startsWith(github.ref, 'refs/tags/') || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.publish_to == 'test-pypi' || github.event.inputs.publish_to == 'pypi'))
    
    steps:
      # Download all wheel artifacts
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
      
      # Prepare wheels for upload
      - name: Prepare wheels for upload
        run: |
          mkdir -p ./wheels
          find ./dist -name "*.whl" -exec cp {} ./wheels/ \;
          ls -la ./wheels/
      
      # Upload to TestPyPI
      - name: Upload to TestPyPI
        if: >-
          github.event.inputs.publish_to == 'test-pypi' || 
          (startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-rc'))
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: ./wheels/
          skip-existing: true
      
      # Upload to PyPI
      - name: Upload to PyPI
        if: >-
          github.event.inputs.publish_to == 'pypi' || 
          (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-rc'))
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: ./wheels/

      # Upload combined wheels as an artifact
      - uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: ./wheels/*.whl